{
  "version": 3,
  "sources": ["../../@react-three/xr/src/XRController.tsx", "../../@react-three/xr/src/utils.ts", "../../@react-three/xr/src/XREvents.ts", "../../@react-three/xr/src/Interactions.tsx", "../../@react-three/xr/src/XR.tsx", "../../@react-three/xr/src/Controllers.tsx", "../../@react-three/xr/src/Hands.tsx"],
  "sourcesContent": ["import * as THREE from 'three'\nimport { XRControllerEvent } from './XREvents'\n\nexport class XRController extends THREE.Group {\n  readonly index: number\n  readonly controller: THREE.XRTargetRaySpace\n  readonly grip: THREE.XRGripSpace\n  readonly hand: THREE.XRHandSpace\n  public inputSource!: XRInputSource\n\n  constructor(index: number, gl: THREE.WebGLRenderer) {\n    super()\n\n    this.index = index\n    this.controller = gl.xr.getController(index)\n    this.grip = gl.xr.getControllerGrip(index)\n    this.hand = gl.xr.getHand(index)\n\n    this.grip.userData.name = 'grip'\n    this.controller.userData.name = 'controller'\n    this.hand.userData.name = 'hand'\n\n    this.visible = false\n    this.add(this.controller, this.grip, this.hand)\n\n    this._onConnected = this._onConnected.bind(this)\n    this._onDisconnected = this._onDisconnected.bind(this)\n\n    this.controller.addEventListener('connected', this._onConnected)\n    this.controller.addEventListener('disconnected', this._onDisconnected)\n  }\n\n  private _onConnected(event: XRControllerEvent) {\n    if (event.fake) return\n\n    this.visible = true\n    this.inputSource = event.data!\n    this.dispatchEvent(event)\n  }\n\n  private _onDisconnected(event: XRControllerEvent) {\n    if (event.fake) return\n\n    this.visible = false\n    this.dispatchEvent(event)\n  }\n\n  dispose() {\n    this.controller.removeEventListener('connected', this._onConnected)\n    this.controller.removeEventListener('disconnected', this._onDisconnected)\n  }\n}\n", "import * as React from 'react'\n\n/**\n * Filters to unique entries of an array.\n */\nexport const uniq = <T>(arr: T[]): T[] => Array.from(new Set<T>(arr))\n\n/**\n * An SSR-friendly useLayoutEffect.\n *\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect elsewhere.\n *\n * @see https://github.com/facebook/react/issues/14927\n */\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' && (window.document?.createElement || window.navigator?.product === 'ReactNative')\n    ? React.useLayoutEffect\n    : React.useEffect\n\n/**\n * Returns a mutable callback function for event handlers.\n */\nexport function useCallbackRef<T>(fn: T): React.MutableRefObject<T> {\n  const ref = React.useRef<T>(fn)\n  useIsomorphicLayoutEffect(() => void (ref.current = fn), [fn])\n  return ref\n}\n", "import { XRController } from './XRController'\nimport { useXR } from './XR'\nimport { useCallbackRef, useIsomorphicLayoutEffect } from './utils'\n\nexport interface XREventRepresentation {\n  type: string\n  target: any\n}\nexport interface XREvent<T extends XREventRepresentation> {\n  nativeEvent: T\n  target: T['target']\n}\n\nexport type XRControllerEventType = Exclude<THREE.XRControllerEventType, XRSessionEventType>\nexport interface XRControllerEvent {\n  type: XRControllerEventType\n  target: XRController\n  data?: XRInputSource\n  fake?: boolean\n}\n\nexport type XREventHandler<T extends XREventRepresentation> = (event: XREvent<T>) => void\nexport interface XREventOptions {\n  handedness?: XRHandedness\n}\n\nexport function useXREvent(event: XRControllerEventType, handler: XREventHandler<XRControllerEvent>, { handedness }: XREventOptions = {}) {\n  const handlerRef = useCallbackRef(handler)\n  const controllers = useXR((state) => state.controllers)\n\n  useIsomorphicLayoutEffect(() => {\n    const listeners = controllers.map((target) => {\n      if (handedness && target.inputSource.handedness !== handedness) return\n\n      const listener = (nativeEvent: XRControllerEvent) => handlerRef.current({ nativeEvent, target })\n      target.controller.addEventListener(event, listener)\n      return () => target.controller.removeEventListener(event, listener)\n    })\n\n    return () => listeners.forEach((cleanup) => cleanup?.())\n  }, [controllers, handedness, event])\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport { useXR } from './XR'\nimport { XRController } from './XRController'\nimport { useXREvent, XREvent, XRControllerEvent } from './XREvents'\nimport { useCallbackRef, useIsomorphicLayoutEffect } from './utils'\n\nexport interface XRInteractionEvent {\n  intersection?: THREE.Intersection\n  intersections: THREE.Intersection[]\n  target: XRController\n}\n\nexport type XRInteractionType =\n  | 'onHover'\n  | 'onBlur'\n  | 'onSelect'\n  | 'onSelectEnd'\n  | 'onSelectStart'\n  | 'onSelectMissed'\n  | 'onSqueeze'\n  | 'onSqueezeEnd'\n  | 'onSqueezeStart'\n  | 'onSqueezeMissed'\n  | 'onMove'\n\nexport type XRInteractionHandler = (event: XRInteractionEvent) => void\n\nconst tempMatrix = new THREE.Matrix4()\n\nexport function InteractionManager({ children }: { children: React.ReactNode }) {\n  const events = useThree((state) => state.events)\n  const get = useThree((state) => state.get)\n  const raycaster = useThree((state) => state.raycaster)\n  const controllers = useXR((state) => state.controllers)\n  const interactions = useXR((state) => state.interactions)\n  const hoverState = useXR((state) => state.hoverState)\n  const hasInteraction = useXR((state) => state.hasInteraction)\n  const getInteraction = useXR((state) => state.getInteraction)\n\n  const intersect = React.useCallback(\n    (controller: THREE.Object3D) => {\n      const objects = Array.from(interactions.keys())\n      tempMatrix.identity().extractRotation(controller.matrixWorld)\n      raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld)\n      raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix)\n\n      return raycaster.intersectObjects(objects, true)\n    },\n    [interactions, raycaster]\n  )\n\n  // Trigger hover and blur events\n  useFrame(() => {\n    if (interactions.size === 0) return\n\n    for (const target of controllers) {\n      const hovering = hoverState[target.inputSource.handedness]\n      const hits = new Set()\n      let intersections = intersect(target.controller)\n\n      if (events.filter) {\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order\n        intersections = events.filter(intersections, get())\n      } else {\n        // Otherwise, filter to first hit\n        const hit = intersections.find((i) => i?.object)\n        if (hit) intersections = [hit]\n      }\n\n      for (const intersection of intersections) {\n        let eventObject: THREE.Object3D | null = intersection.object\n\n        while (eventObject) {\n          if (hasInteraction(eventObject, 'onHover') && !hovering.has(eventObject)) {\n            const handlers = getInteraction(eventObject, 'onHover')!\n            for (const handler of handlers) {\n              handler({ target, intersection, intersections })\n            }\n          }\n\n          const moveHandlers = getInteraction(eventObject, 'onMove')\n          moveHandlers?.forEach((handler) => handler({ target, intersection, intersections }))\n\n          hovering.set(eventObject, intersection)\n          hits.add(eventObject.id)\n          eventObject = eventObject.parent\n        }\n      }\n\n      // Trigger blur on all the object that were hovered in the previous frame\n      // but missed in this one\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          hovering.delete(eventObject)\n\n          const handlers = getInteraction(eventObject, 'onBlur')\n          if (!handlers) continue\n\n          for (const handler of handlers) {\n            handler({ target, intersections })\n          }\n        }\n      }\n    }\n  })\n\n  const triggerEvent = React.useCallback(\n    (interaction: XRInteractionType) => (e: XREvent<XRControllerEvent>) => {\n      const hovering = hoverState[e.target.inputSource.handedness]\n      const intersections = Array.from(new Set(hovering.values()))\n\n      interactions.forEach((handlers, object) => {\n        if (hovering.has(object)) {\n          if (!handlers[interaction]) return\n\n          for (const handler of handlers[interaction]) {\n            handler.current?.({ target: e.target, intersection: hovering.get(object), intersections })\n          }\n        } else {\n          if (interaction === 'onSelect' && handlers['onSelectMissed']) {\n            for (const handler of handlers['onSelectMissed']) {\n              handler.current?.({ target: e.target, intersections })\n            }\n          } else if (interaction === 'onSqueeze' && handlers['onSqueezeMissed']) {\n            for (const handler of handlers['onSqueezeMissed']) {\n              handler.current?.({ target: e.target, intersections })\n            }\n          }\n        }\n      })\n    },\n    [hoverState, interactions]\n  )\n\n  useXREvent('select', triggerEvent('onSelect'))\n  useXREvent('selectstart', triggerEvent('onSelectStart'))\n  useXREvent('selectend', triggerEvent('onSelectEnd'))\n  useXREvent('squeeze', triggerEvent('onSqueeze'))\n  useXREvent('squeezeend', triggerEvent('onSqueezeEnd'))\n  useXREvent('squeezestart', triggerEvent('onSqueezeStart'))\n\n  return <>{children}</>\n}\n\nexport function useInteraction(ref: React.RefObject<THREE.Object3D>, type: XRInteractionType, handler?: XRInteractionHandler) {\n  const addInteraction = useXR((state) => state.addInteraction)\n  const removeInteraction = useXR((state) => state.removeInteraction)\n  const handlerRef = useCallbackRef(handler)\n\n  useIsomorphicLayoutEffect(() => {\n    const target = ref.current\n    if (!target || !handlerRef.current) return\n\n    addInteraction(target, type, handlerRef as React.RefObject<XRInteractionHandler>)\n\n    return () => removeInteraction(target, type, handlerRef as React.RefObject<XRInteractionHandler>)\n  }, [ref, type, addInteraction, removeInteraction])\n}\n\nexport interface InteractiveProps {\n  onHover?: XRInteractionHandler\n  onBlur?: XRInteractionHandler\n  onSelectStart?: XRInteractionHandler\n  onSelectEnd?: XRInteractionHandler\n  onSelectMissed?: XRInteractionHandler\n  onSelect?: XRInteractionHandler\n  onSqueezeStart?: XRInteractionHandler\n  onSqueezeEnd?: XRInteractionHandler\n  onSqueezeMissed?: XRInteractionHandler\n  onSqueeze?: XRInteractionHandler\n  onMove?: XRInteractionHandler\n  children: React.ReactNode\n}\nexport const Interactive = React.forwardRef<THREE.Group, InteractiveProps>(function Interactive(\n  {\n    onHover,\n    onBlur,\n    onSelectStart,\n    onSelectEnd,\n    onSelectMissed,\n    onSelect,\n    onSqueezeStart,\n    onSqueezeEnd,\n    onSqueezeMissed,\n    onSqueeze,\n    onMove,\n    children\n  }: InteractiveProps,\n  passedRef\n) {\n  const ref = React.useRef<THREE.Group>(null!)\n  React.useImperativeHandle(passedRef, () => ref.current)\n\n  useInteraction(ref, 'onHover', onHover)\n  useInteraction(ref, 'onBlur', onBlur)\n  useInteraction(ref, 'onSelectStart', onSelectStart)\n  useInteraction(ref, 'onSelectEnd', onSelectEnd)\n  useInteraction(ref, 'onSelectMissed', onSelectMissed)\n  useInteraction(ref, 'onSelect', onSelect)\n  useInteraction(ref, 'onSqueezeStart', onSqueezeStart)\n  useInteraction(ref, 'onSqueezeEnd', onSqueezeEnd)\n  useInteraction(ref, 'onSqueezeMissed', onSqueezeMissed)\n  useInteraction(ref, 'onSqueeze', onSqueeze)\n  useInteraction(ref, 'onMove', onMove)\n\n  return <group ref={ref}>{children}</group>\n})\n\nexport interface RayGrabProps extends InteractiveProps {}\nexport const RayGrab = React.forwardRef<THREE.Group, RayGrabProps>(function RayGrab(\n  { onSelectStart, onSelectEnd, children, ...rest },\n  forwardedRef\n) {\n  const grabbingController = React.useRef<THREE.Object3D>()\n  const groupRef = React.useRef<THREE.Group>(null!)\n  const previousTransform = React.useMemo(() => new THREE.Matrix4(), [])\n  React.useImperativeHandle(forwardedRef, () => groupRef.current)\n\n  useFrame(() => {\n    const controller = grabbingController.current\n    const group = groupRef.current\n    if (!controller) return\n\n    group.applyMatrix4(previousTransform)\n    group.applyMatrix4(controller.matrixWorld)\n    group.updateMatrixWorld()\n\n    previousTransform.copy(controller.matrixWorld).invert()\n  })\n\n  return (\n    <Interactive\n      ref={groupRef}\n      onSelectStart={(e) => {\n        grabbingController.current = e.target.controller\n        previousTransform.copy(e.target.controller.matrixWorld).invert()\n        onSelectStart?.(e)\n      }}\n      onSelectEnd={(e) => {\n        if (e.target.controller === grabbingController.current) {\n          grabbingController.current = undefined\n        }\n        onSelectEnd?.(e)\n      }}\n      {...rest}\n    >\n      {children}\n    </Interactive>\n  )\n})\n\nexport type HitTestCallback = (hitMatrix: THREE.Matrix4, hit: XRHitTestResult) => void\n\nexport function useHitTest(hitTestCallback: HitTestCallback) {\n  const session = useXR((state) => state.session)\n  const hitTestSource = React.useRef<XRHitTestSource | undefined>()\n  const hitMatrix = React.useMemo(() => new THREE.Matrix4(), [])\n\n  useIsomorphicLayoutEffect(() => {\n    if (!session) return void (hitTestSource.current = undefined)\n\n    session.requestReferenceSpace('viewer').then(async (referenceSpace) => {\n      hitTestSource.current = await session?.requestHitTestSource?.({ space: referenceSpace })\n    })\n  }, [session])\n\n  useFrame((state, _, frame: XRFrame) => {\n    if (!frame || !hitTestSource.current) return\n\n    const [hit] = frame.getHitTestResults(hitTestSource.current)\n    if (hit) {\n      const referenceSpace = state.gl.xr.getReferenceSpace()!\n      const pose = hit.getPose(referenceSpace)\n\n      if (pose) {\n        hitMatrix.fromArray(pose.transform.matrix)\n        hitTestCallback(hitMatrix, hit)\n      }\n    }\n  })\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport create, { EqualityChecker, GetState, SetState, StateSelector, UseBoundStore } from 'zustand'\nimport { useThree } from '@react-three/fiber'\nimport { XRController } from './XRController'\nimport { InteractionManager, XRInteractionHandler, XRInteractionType } from './Interactions'\nimport { XREventHandler } from './XREvents'\nimport { uniq, useIsomorphicLayoutEffect, useCallbackRef } from './utils'\n\nexport interface XRState {\n  set: SetState<XRState>\n  get: GetState<XRState>\n\n  controllers: XRController[]\n  isPresenting: boolean\n  isHandTracking: boolean\n  player: THREE.Group\n  session: XRSession | null\n  foveation: number\n  referenceSpace: XRReferenceSpaceType\n\n  hoverState: Record<XRHandedness, Map<THREE.Object3D, THREE.Intersection>>\n  interactions: Map<THREE.Object3D, Record<XRInteractionType, React.RefObject<XRInteractionHandler>[]>>\n  hasInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => boolean\n  getInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => XRInteractionHandler[] | undefined\n  addInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n  removeInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n}\nconst XRContext = React.createContext<UseBoundStore<XRState>>(null!)\n\ninterface GlobalSessionState {\n  set: SetState<GlobalSessionState>\n  get: GetState<GlobalSessionState>\n  session: XRSession | null\n  referenceSpaceType: XRReferenceSpaceType | null\n}\nconst globalSessionStore = create<GlobalSessionState>((set, get) => ({ set, get, session: null, referenceSpaceType: null }))\n\nexport type XRManagerEventType = 'sessionstart' | 'sessionend'\nexport interface XRManagerEvent {\n  type: XRManagerEventType\n  target: XRSession\n}\nexport interface XRProps {\n  /**\n   * Enables foveated rendering. `Default is `0`\n   * 0 = no foveation, full resolution\n   * 1 = maximum foveation, the edges render at lower resolution\n   */\n  foveation?: number\n  /** Type of WebXR reference space to use. Default is `local-floor` */\n  referenceSpace?: XRReferenceSpaceType\n  /** Called as an XRSession is requested */\n  onSessionStart?: XREventHandler<XRManagerEvent>\n  /** Called after an XRSession is terminated */\n  onSessionEnd?: XREventHandler<XRManagerEvent>\n  /** Called when an XRSession is hidden or unfocused. */\n  onVisibilityChange?: XREventHandler<XRSessionEvent>\n  /** Called when available inputsources change */\n  onInputSourcesChange?: XREventHandler<XRSessionEvent>\n  children: React.ReactNode\n}\nfunction XRManager({\n  foveation = 0,\n  referenceSpace = 'local-floor',\n  onSessionStart,\n  onSessionEnd,\n  onVisibilityChange,\n  onInputSourcesChange,\n  children\n}: XRProps) {\n  const gl = useThree((state) => state.gl)\n  const camera = useThree((state) => state.camera)\n  const player = useXR((state) => state.player)\n  const get = useXR((state) => state.get)\n  const set = useXR((state) => state.set)\n  const session = useXR((state) => state.session)\n  const controllers = useXR((state) => state.controllers)\n\n  const onSessionStartRef = useCallbackRef(onSessionStart)\n  const onSessionEndRef = useCallbackRef(onSessionEnd)\n  const onVisibilityChangeRef = useCallbackRef(onVisibilityChange)\n  const onInputSourcesChangeRef = useCallbackRef(onInputSourcesChange)\n\n  useIsomorphicLayoutEffect(() => {\n    const handlers = [0, 1].map((id) => {\n      const target = new XRController(id, gl)\n      const onConnected = () => set((state) => ({ controllers: [...state.controllers, target] }))\n      const onDisconnected = () => set((state) => ({ controllers: state.controllers.filter((it) => it !== target) }))\n\n      target.addEventListener('connected', onConnected)\n      target.addEventListener('disconnected', onDisconnected)\n\n      return () => {\n        target.removeEventListener('connected', onConnected)\n        target.removeEventListener('disconnected', onDisconnected)\n      }\n    })\n\n    return () => handlers.forEach((cleanup) => cleanup())\n  }, [gl, set])\n\n  useIsomorphicLayoutEffect(() => globalSessionStore.subscribe(({ session }) => set(() => ({ session }))), [gl.xr, set])\n\n  useIsomorphicLayoutEffect(() => {\n    gl.xr.setFoveation(foveation)\n    set(() => ({ foveation }))\n  }, [gl.xr, foveation, set])\n\n  useIsomorphicLayoutEffect(() => {\n    const globalSessionState = globalSessionStore.getState()\n    gl.xr.setReferenceSpaceType(referenceSpace)\n    set(() => ({ referenceSpace }))\n    globalSessionState.set({ referenceSpaceType: referenceSpace })\n  }, [gl.xr, referenceSpace, set])\n\n  useIsomorphicLayoutEffect(() => {\n    if (!session) return void gl.xr.setSession(null!)\n\n    const handleSessionStart = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: true }))\n      onSessionStartRef.current?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleSessionEnd = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: false, session: null }))\n      globalSessionStore.setState(() => ({ session: null }))\n      onSessionEndRef.current?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleVisibilityChange = (nativeEvent: XRSessionEvent) => {\n      onVisibilityChangeRef.current?.({ nativeEvent, target: session })\n    }\n    const handleInputSourcesChange = (nativeEvent: XRInputSourceChangeEvent) => {\n      const isHandTracking = Object.values(session.inputSources).some((source) => source.hand)\n      set(() => ({ isHandTracking }))\n      onInputSourcesChangeRef.current?.({ nativeEvent, target: session })\n    }\n\n    gl.xr.addEventListener('sessionstart', handleSessionStart)\n    gl.xr.addEventListener('sessionend', handleSessionEnd)\n    session.addEventListener('visibilitychange', handleVisibilityChange)\n    session.addEventListener('inputsourceschange', handleInputSourcesChange)\n\n    gl.xr.setSession(session).then(() => {\n      // on setSession, three#WebXRManager resets foveation to 1\n      // so foveation set needs to happen after it\n      gl.xr.setFoveation(get().foveation)\n    })\n\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionStart)\n      gl.xr.removeEventListener('sessionend', handleSessionEnd)\n      session.removeEventListener('visibilitychange', handleVisibilityChange)\n      session.removeEventListener('inputsourceschange', handleInputSourcesChange)\n    }\n  }, [session, gl.xr, set, get])\n\n  return (\n    <InteractionManager>\n      <primitive object={player}>\n        <primitive object={camera} />\n        {controllers.map((controller) => (\n          <primitive key={controller.index} object={controller} />\n        ))}\n      </primitive>\n      {children}\n    </InteractionManager>\n  )\n}\n\nexport function XR(props: XRProps) {\n  const store = React.useMemo(\n    () =>\n      create<XRState>((set, get) => ({\n        set,\n        get,\n\n        controllers: [],\n        isPresenting: false,\n        isHandTracking: false,\n        player: new THREE.Group(),\n        session: null,\n        foveation: 0,\n        referenceSpace: 'local-floor',\n\n        hoverState: {\n          left: new Map(),\n          right: new Map(),\n          none: new Map()\n        },\n        interactions: new Map(),\n        hasInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return !!get()\n            .interactions.get(object)\n            ?.[eventType].some((handlerRef) => handlerRef.current)\n        },\n        getInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return get()\n            .interactions.get(object)\n            ?.[eventType].reduce((result, handlerRef) => {\n              if (handlerRef.current) {\n                result.push(handlerRef.current)\n              }\n              return result\n            }, [] as XRInteractionHandler[])\n        },\n        addInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const interactions = get().interactions\n          if (!interactions.has(object)) {\n            interactions.set(object, {\n              onHover: [],\n              onBlur: [],\n              onSelect: [],\n              onSelectEnd: [],\n              onSelectStart: [],\n              onSelectMissed: [],\n              onSqueeze: [],\n              onSqueezeEnd: [],\n              onSqueezeStart: [],\n              onSqueezeMissed: [],\n              onMove: []\n            })\n          }\n\n          const target = interactions.get(object)!\n          target[eventType].push(handlerRef)\n        },\n        removeInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const target = get().interactions.get(object)\n          if (target) {\n            const interactionIndex = target[eventType].indexOf(handlerRef)\n            if (interactionIndex !== -1) target[eventType].splice(interactionIndex, 1)\n          }\n        }\n      })),\n    []\n  )\n\n  return (\n    <XRContext.Provider value={store}>\n      <XRManager {...props} />\n    </XRContext.Provider>\n  )\n}\n\nexport type XRButtonStatus = 'unsupported' | 'exited' | 'entered'\nexport interface XRButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children' | 'onError'> {\n  /** The type of `XRSession` to create */\n  mode: 'AR' | 'VR' | 'inline'\n  /**\n   * `XRSession` configuration options\n   * @see https://immersive-web.github.io/webxr/#feature-dependencies\n   */\n  sessionInit?: XRSessionInit\n  /** Whether this button should only enter an `XRSession`. Default is `false` */\n  enterOnly?: boolean\n  /** Whether this button should only exit an `XRSession`. Default is `false` */\n  exitOnly?: boolean\n  /** This callback gets fired if XR initialization fails. */\n  onError?: (error: Error) => void\n  /** React children, can also accept a callback returning an `XRButtonStatus` */\n  children?: React.ReactNode | ((status: XRButtonStatus) => React.ReactNode)\n}\n\nconst getSessionOptions = (\n  globalStateReferenceSpaceType: XRReferenceSpaceType | null,\n  sessionInit: XRSessionInit | undefined\n): XRSessionInit | undefined => {\n  if (!globalStateReferenceSpaceType && !sessionInit) {\n    return undefined\n  }\n\n  if (globalStateReferenceSpaceType && !sessionInit) {\n    return { optionalFeatures: [globalStateReferenceSpaceType] }\n  }\n\n  if (globalStateReferenceSpaceType && sessionInit) {\n    return { ...sessionInit, optionalFeatures: uniq([...(sessionInit.optionalFeatures ?? []), globalStateReferenceSpaceType]) }\n  }\n\n  return sessionInit\n}\n\nexport const XRButton = React.forwardRef<HTMLButtonElement, XRButtonProps>(function XRButton(\n  { mode, sessionInit, enterOnly = false, exitOnly = false, onClick, onError, children, ...props },\n  ref\n) {\n  const [status, setStatus] = React.useState<XRButtonStatus>('exited')\n  const label = status === 'unsupported' ? `${mode} unsupported` : `${status === 'entered' ? 'Exit' : 'Enter'} ${mode}`\n  const sessionMode = (mode === 'inline' ? mode : `immersive-${mode.toLowerCase()}`) as XRSessionMode\n  const onErrorRef = useCallbackRef(onError)\n\n  useIsomorphicLayoutEffect(() => {\n    if (!navigator?.xr) return void setStatus('unsupported')\n    navigator.xr!.isSessionSupported(sessionMode).then((supported) => setStatus(supported ? 'exited' : 'unsupported'))\n  }, [sessionMode])\n\n  useIsomorphicLayoutEffect(\n    () =>\n      globalSessionStore.subscribe((state) => {\n        if (state.session) {\n          setStatus('entered')\n        } else if (status !== 'unsupported') {\n          setStatus('exited')\n        }\n      }),\n    [status]\n  )\n\n  const toggleSession = React.useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      onClick?.(event)\n\n      const xrState = globalSessionStore.getState()\n\n      // Bail if button only configures exit/enter\n      if (xrState.session && enterOnly) return\n      if (!xrState.session && exitOnly) return\n\n      let session: XRSession | null = null\n\n      try {\n        // Exit/enter session\n        if (xrState.session) {\n          await xrState.session.end()\n        } else {\n          const options = getSessionOptions(xrState.referenceSpaceType, sessionInit)\n          session = await navigator.xr!.requestSession(sessionMode, options)\n        }\n\n        xrState.set(() => ({ session }))\n      } catch (e) {\n        const onError = onErrorRef.current\n        if (onError && e instanceof Error) onError(e)\n        else throw e\n      }\n    },\n    [onClick, enterOnly, exitOnly, sessionMode, sessionInit, onErrorRef]\n  )\n\n  return (\n    <button {...props} ref={ref} onClick={status === 'unsupported' ? onClick : toggleSession}>\n      {typeof children === 'function' ? children(status) : children ?? label}\n    </button>\n  )\n})\n\nconst buttonStyles: any = {\n  position: 'absolute',\n  bottom: '24px',\n  left: '50%',\n  transform: 'translateX(-50%)',\n  padding: '12px 24px',\n  border: '1px solid white',\n  borderRadius: '4px',\n  background: 'rgba(0, 0, 0, 0.1)',\n  color: 'white',\n  font: 'normal 0.8125rem sans-serif',\n  outline: 'none',\n  zIndex: 99999,\n  cursor: 'pointer'\n}\n\nexport const ARButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  (\n    {\n      style = buttonStyles,\n      sessionInit = {\n        // @ts-ignore\n        domOverlay: typeof document !== 'undefined' ? { root: document.body } : undefined,\n        optionalFeatures: ['hit-test', 'dom-overlay', 'dom-overlay-for-handheld-ar']\n      },\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <XRButton {...rest} ref={ref} mode=\"AR\" style={style} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport const VRButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  (\n    {\n      style = buttonStyles,\n      sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] },\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <XRButton {...rest} ref={ref} mode=\"VR\" style={style} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport function useXR<T = XRState>(\n  selector: StateSelector<XRState, T> = (state) => state as unknown as T,\n  equalityFn?: EqualityChecker<T>\n) {\n  const store = React.useContext(XRContext)\n  if (!store) throw new Error('useXR must be used within an <XR /> component!')\n  return store(selector, equalityFn)\n}\n\nexport function useController(handedness: XRHandedness) {\n  const controllers = useXR((state) => state.controllers)\n  const controller = React.useMemo(\n    () => controllers.find(({ inputSource }) => inputSource.handedness === handedness),\n    [handedness, controllers]\n  )\n\n  return controller\n}\n", "import * as React from 'react'\nimport * as THREE from 'three'\nimport { XRControllerModelFactory } from 'three-stdlib'\nimport { useFrame, Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { useXR } from './XR'\nimport { XRController } from './XRController'\nimport { useIsomorphicLayoutEffect } from './utils'\n\nexport interface RayProps extends Partial<JSX.IntrinsicElements['object3D']> {\n  /** The XRController to attach the ray to */\n  target: XRController\n  /** Whether to hide the ray on controller blur. Default is `false` */\n  hideOnBlur?: boolean\n}\nexport const Ray = React.forwardRef<THREE.Line, RayProps>(function Ray({ target, hideOnBlur = false, ...props }, forwardedRef) {\n  const hoverState = useXR((state) => state.hoverState)\n  const ray = React.useRef<THREE.Line>(null!)\n  const rayGeometry = React.useMemo(\n    () => new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]),\n    []\n  )\n  React.useImperativeHandle(forwardedRef, () => ray.current)\n\n  // Show ray line when hovering objects\n  useFrame(() => {\n    let rayLength = 1\n\n    const intersection: THREE.Intersection = hoverState[target.inputSource.handedness].values().next().value\n    if (intersection && target.inputSource.handedness !== 'none') {\n      rayLength = intersection.distance\n      if (hideOnBlur) ray.current.visible = false\n    } else if (hideOnBlur) {\n      ray.current.visible = true\n    }\n\n    // Tiny offset to clip ray on AR devices\n    // that don't have handedness set to 'none'\n    const offset = -0.01\n    ray.current.scale.z = rayLength + offset\n  })\n\n  // @ts-ignore TS assumes that JS is for the web, and overrides line w/SVG props\n  return <line ref={ray} geometry={rayGeometry} material-opacity={0.8} material-transparent={true} {...props} />\n})\n\nconst modelFactory = new XRControllerModelFactory()\n\nclass ControllerModel extends THREE.Group {\n  constructor(target: XRController) {\n    super()\n    this.add(modelFactory.createControllerModel(target.controller))\n  }\n}\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      controllerModel: Object3DNode<ControllerModel, typeof ControllerModel>\n    }\n  }\n}\n\nexport interface ControllersProps {\n  /** Optional material props to pass to controllers' ray indicators */\n  rayMaterial?: JSX.IntrinsicElements['meshBasicMaterial']\n  /** Whether to hide controllers' rays on blur. Default is `false` */\n  hideRaysOnBlur?: boolean\n}\nexport function Controllers({ rayMaterial = {}, hideRaysOnBlur = false }: ControllersProps) {\n  const controllers = useXR((state) => state.controllers)\n  const isHandTracking = useXR((state) => state.isHandTracking)\n  const rayMaterialProps = React.useMemo(\n    () =>\n      Object.entries(rayMaterial).reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [`material-${key}`]: value\n        }),\n        {}\n      ),\n    [JSON.stringify(rayMaterial)] // eslint-disable-line react-hooks/exhaustive-deps\n  )\n  React.useMemo(() => extend({ ControllerModel }), [])\n\n  // Send fake connected event (no-op) so models start loading\n  useIsomorphicLayoutEffect(() => {\n    for (const target of controllers) {\n      target.controller.dispatchEvent({ type: 'connected', data: target.inputSource, fake: true })\n    }\n  }, [controllers])\n\n  return (\n    <>\n      {controllers.map((target, i) => (\n        <React.Fragment key={i}>\n          {createPortal(<controllerModel args={[target]} />, target.grip)}\n          {createPortal(\n            <Ray visible={!isHandTracking} hideOnBlur={hideRaysOnBlur} target={target} {...rayMaterialProps} />,\n            target.controller\n          )}\n        </React.Fragment>\n      ))}\n    </>\n  )\n}\n", "import * as React from 'react'\nimport { Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { OculusHandModel } from 'three-stdlib'\nimport { useXR } from './XR'\nimport { useIsomorphicLayoutEffect } from './utils'\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      oculusHandModel: Object3DNode<OculusHandModel, typeof OculusHandModel>\n    }\n  }\n}\n\nexport interface HandsProps {\n  modelLeft?: string\n  modelRight?: string\n}\nexport function Hands({ modelLeft, modelRight }: HandsProps) {\n  const controllers = useXR((state) => state.controllers)\n  React.useMemo(() => extend({ OculusHandModel }), [])\n\n  // Send fake connected event (no-op) so models start loading\n  useIsomorphicLayoutEffect(() => {\n    for (const target of controllers) {\n      target.hand.dispatchEvent({ type: 'connected', data: target.inputSource, fake: true })\n    }\n  }, [controllers, modelLeft, modelRight])\n\n  return <>{controllers.map(({ hand }) => createPortal(<oculusHandModel args={[hand, modelLeft, modelRight]} />, hand))}</>\n}\n"],
  "mappings": "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",
  "names": ["_a", "_b", "Interactive", "RayGrab", "session", "_a", "XRButton", "onError", "Ray"]
}
