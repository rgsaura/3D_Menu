"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const React = require("react");
const THREE = require("three");
const create = require("zustand");
const fiber = require("@react-three/fiber");
const XRController = require("./XRController.js");
const Interactions = require("./Interactions.js");
const utils = require("./utils.js");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespace(React);
const THREE__namespace = /* @__PURE__ */ _interopNamespace(THREE);
const create__default = /* @__PURE__ */ _interopDefaultLegacy(create);
const XRContext = React__namespace.createContext(null);
const globalSessionStore = create__default.default((set, get) => ({ set, get, session: null, referenceSpaceType: null }));
function XRManager({
  foveation = 0,
  referenceSpace = "local-floor",
  onSessionStart,
  onSessionEnd,
  onVisibilityChange,
  onInputSourcesChange,
  children
}) {
  const gl = fiber.useThree((state) => state.gl);
  const camera = fiber.useThree((state) => state.camera);
  const player = useXR((state) => state.player);
  const get = useXR((state) => state.get);
  const set = useXR((state) => state.set);
  const session = useXR((state) => state.session);
  const controllers = useXR((state) => state.controllers);
  const onSessionStartRef = utils.useCallbackRef(onSessionStart);
  const onSessionEndRef = utils.useCallbackRef(onSessionEnd);
  const onVisibilityChangeRef = utils.useCallbackRef(onVisibilityChange);
  const onInputSourcesChangeRef = utils.useCallbackRef(onInputSourcesChange);
  utils.useIsomorphicLayoutEffect(() => {
    const handlers = [0, 1].map((id) => {
      const target = new XRController.XRController(id, gl);
      const onConnected = () => set((state) => ({ controllers: [...state.controllers, target] }));
      const onDisconnected = () => set((state) => ({ controllers: state.controllers.filter((it) => it !== target) }));
      target.addEventListener("connected", onConnected);
      target.addEventListener("disconnected", onDisconnected);
      return () => {
        target.removeEventListener("connected", onConnected);
        target.removeEventListener("disconnected", onDisconnected);
      };
    });
    return () => handlers.forEach((cleanup) => cleanup());
  }, [gl, set]);
  utils.useIsomorphicLayoutEffect(() => globalSessionStore.subscribe(({ session: session2 }) => set(() => ({ session: session2 }))), [gl.xr, set]);
  utils.useIsomorphicLayoutEffect(() => {
    gl.xr.setFoveation(foveation);
    set(() => ({ foveation }));
  }, [gl.xr, foveation, set]);
  utils.useIsomorphicLayoutEffect(() => {
    const globalSessionState = globalSessionStore.getState();
    gl.xr.setReferenceSpaceType(referenceSpace);
    set(() => ({ referenceSpace }));
    globalSessionState.set({ referenceSpaceType: referenceSpace });
  }, [gl.xr, referenceSpace, set]);
  utils.useIsomorphicLayoutEffect(() => {
    if (!session)
      return void gl.xr.setSession(null);
    const handleSessionStart = (nativeEvent) => {
      var _a;
      set(() => ({ isPresenting: true }));
      (_a = onSessionStartRef.current) == null ? void 0 : _a.call(onSessionStartRef, { nativeEvent: { ...nativeEvent, target: session }, target: session });
    };
    const handleSessionEnd = (nativeEvent) => {
      var _a;
      set(() => ({ isPresenting: false, session: null }));
      globalSessionStore.setState(() => ({ session: null }));
      (_a = onSessionEndRef.current) == null ? void 0 : _a.call(onSessionEndRef, { nativeEvent: { ...nativeEvent, target: session }, target: session });
    };
    const handleVisibilityChange = (nativeEvent) => {
      var _a;
      (_a = onVisibilityChangeRef.current) == null ? void 0 : _a.call(onVisibilityChangeRef, { nativeEvent, target: session });
    };
    const handleInputSourcesChange = (nativeEvent) => {
      var _a;
      const isHandTracking = Object.values(session.inputSources).some((source) => source.hand);
      set(() => ({ isHandTracking }));
      (_a = onInputSourcesChangeRef.current) == null ? void 0 : _a.call(onInputSourcesChangeRef, { nativeEvent, target: session });
    };
    gl.xr.addEventListener("sessionstart", handleSessionStart);
    gl.xr.addEventListener("sessionend", handleSessionEnd);
    session.addEventListener("visibilitychange", handleVisibilityChange);
    session.addEventListener("inputsourceschange", handleInputSourcesChange);
    gl.xr.setSession(session).then(() => {
      gl.xr.setFoveation(get().foveation);
    });
    return () => {
      gl.xr.removeEventListener("sessionstart", handleSessionStart);
      gl.xr.removeEventListener("sessionend", handleSessionEnd);
      session.removeEventListener("visibilitychange", handleVisibilityChange);
      session.removeEventListener("inputsourceschange", handleInputSourcesChange);
    };
  }, [session, gl.xr, set, get]);
  return /* @__PURE__ */ React__namespace.createElement(Interactions.InteractionManager, null, /* @__PURE__ */ React__namespace.createElement("primitive", {
    object: player
  }, /* @__PURE__ */ React__namespace.createElement("primitive", {
    object: camera
  }), controllers.map((controller) => /* @__PURE__ */ React__namespace.createElement("primitive", {
    key: controller.index,
    object: controller
  }))), children);
}
function XR(props) {
  const store = React__namespace.useMemo(
    () => create__default.default((set, get) => ({
      set,
      get,
      controllers: [],
      isPresenting: false,
      isHandTracking: false,
      player: new THREE__namespace.Group(),
      session: null,
      foveation: 0,
      referenceSpace: "local-floor",
      hoverState: {
        left: /* @__PURE__ */ new Map(),
        right: /* @__PURE__ */ new Map(),
        none: /* @__PURE__ */ new Map()
      },
      interactions: /* @__PURE__ */ new Map(),
      hasInteraction(object, eventType) {
        var _a;
        return !!((_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].some((handlerRef) => handlerRef.current));
      },
      getInteraction(object, eventType) {
        var _a;
        return (_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].reduce((result, handlerRef) => {
          if (handlerRef.current) {
            result.push(handlerRef.current);
          }
          return result;
        }, []);
      },
      addInteraction(object, eventType, handlerRef) {
        const interactions = get().interactions;
        if (!interactions.has(object)) {
          interactions.set(object, {
            onHover: [],
            onBlur: [],
            onSelect: [],
            onSelectEnd: [],
            onSelectStart: [],
            onSelectMissed: [],
            onSqueeze: [],
            onSqueezeEnd: [],
            onSqueezeStart: [],
            onSqueezeMissed: [],
            onMove: []
          });
        }
        const target = interactions.get(object);
        target[eventType].push(handlerRef);
      },
      removeInteraction(object, eventType, handlerRef) {
        const target = get().interactions.get(object);
        if (target) {
          const interactionIndex = target[eventType].indexOf(handlerRef);
          if (interactionIndex !== -1)
            target[eventType].splice(interactionIndex, 1);
        }
      }
    })),
    []
  );
  return /* @__PURE__ */ React__namespace.createElement(XRContext.Provider, {
    value: store
  }, /* @__PURE__ */ React__namespace.createElement(XRManager, {
    ...props
  }));
}
const getSessionOptions = (globalStateReferenceSpaceType, sessionInit) => {
  var _a;
  if (!globalStateReferenceSpaceType && !sessionInit) {
    return void 0;
  }
  if (globalStateReferenceSpaceType && !sessionInit) {
    return { optionalFeatures: [globalStateReferenceSpaceType] };
  }
  if (globalStateReferenceSpaceType && sessionInit) {
    return { ...sessionInit, optionalFeatures: utils.uniq([...(_a = sessionInit.optionalFeatures) != null ? _a : [], globalStateReferenceSpaceType]) };
  }
  return sessionInit;
};
const XRButton = React__namespace.forwardRef(function XRButton2({ mode, sessionInit, enterOnly = false, exitOnly = false, onClick, onError, children, ...props }, ref) {
  const [status, setStatus] = React__namespace.useState("exited");
  const label = status === "unsupported" ? `${mode} unsupported` : `${status === "entered" ? "Exit" : "Enter"} ${mode}`;
  const sessionMode = mode === "inline" ? mode : `immersive-${mode.toLowerCase()}`;
  const onErrorRef = utils.useCallbackRef(onError);
  utils.useIsomorphicLayoutEffect(() => {
    if (!(navigator == null ? void 0 : navigator.xr))
      return void setStatus("unsupported");
    navigator.xr.isSessionSupported(sessionMode).then((supported) => setStatus(supported ? "exited" : "unsupported"));
  }, [sessionMode]);
  utils.useIsomorphicLayoutEffect(
    () => globalSessionStore.subscribe((state) => {
      if (state.session) {
        setStatus("entered");
      } else if (status !== "unsupported") {
        setStatus("exited");
      }
    }),
    [status]
  );
  const toggleSession = React__namespace.useCallback(
    async (event) => {
      onClick == null ? void 0 : onClick(event);
      const xrState = globalSessionStore.getState();
      if (xrState.session && enterOnly)
        return;
      if (!xrState.session && exitOnly)
        return;
      let session = null;
      try {
        if (xrState.session) {
          await xrState.session.end();
        } else {
          const options = getSessionOptions(xrState.referenceSpaceType, sessionInit);
          session = await navigator.xr.requestSession(sessionMode, options);
        }
        xrState.set(() => ({ session }));
      } catch (e) {
        const onError2 = onErrorRef.current;
        if (onError2 && e instanceof Error)
          onError2(e);
        else
          throw e;
      }
    },
    [onClick, enterOnly, exitOnly, sessionMode, sessionInit, onErrorRef]
  );
  return /* @__PURE__ */ React__namespace.createElement("button", {
    ...props,
    ref,
    onClick: status === "unsupported" ? onClick : toggleSession
  }, typeof children === "function" ? children(status) : children != null ? children : label);
});
const buttonStyles = {
  position: "absolute",
  bottom: "24px",
  left: "50%",
  transform: "translateX(-50%)",
  padding: "12px 24px",
  border: "1px solid white",
  borderRadius: "4px",
  background: "rgba(0, 0, 0, 0.1)",
  color: "white",
  font: "normal 0.8125rem sans-serif",
  outline: "none",
  zIndex: 99999,
  cursor: "pointer"
};
const ARButton = React__namespace.forwardRef(
  ({
    style = buttonStyles,
    sessionInit = {
      domOverlay: typeof document !== "undefined" ? { root: document.body } : void 0,
      optionalFeatures: ["hit-test", "dom-overlay", "dom-overlay-for-handheld-ar"]
    },
    children,
    ...rest
  }, ref) => /* @__PURE__ */ React__namespace.createElement(XRButton, {
    ...rest,
    ref,
    mode: "AR",
    style,
    sessionInit
  }, children)
);
const VRButton = React__namespace.forwardRef(
  ({
    style = buttonStyles,
    sessionInit = { optionalFeatures: ["local-floor", "bounded-floor", "hand-tracking", "layers"] },
    children,
    ...rest
  }, ref) => /* @__PURE__ */ React__namespace.createElement(XRButton, {
    ...rest,
    ref,
    mode: "VR",
    style,
    sessionInit
  }, children)
);
function useXR(selector = (state) => state, equalityFn) {
  const store = React__namespace.useContext(XRContext);
  if (!store)
    throw new Error("useXR must be used within an <XR /> component!");
  return store(selector, equalityFn);
}
function useController(handedness) {
  const controllers = useXR((state) => state.controllers);
  const controller = React__namespace.useMemo(
    () => controllers.find(({ inputSource }) => inputSource.handedness === handedness),
    [handedness, controllers]
  );
  return controller;
}
exports.ARButton = ARButton;
exports.VRButton = VRButton;
exports.XR = XR;
exports.XRButton = XRButton;
exports.useController = useController;
exports.useXR = useXR;
//# sourceMappingURL=XR.js.map
